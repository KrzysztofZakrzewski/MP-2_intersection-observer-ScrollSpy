"use strict";var sections=document.querySelectorAll(".section"),observer=new IntersectionObserver(function(e,t){e.forEach(function(e){var t;e.isIntersecting?(t=e.target.getAttribute("id"),console.log("Visible section:",t),(t=document.querySelector('nav a[href="#'.concat(t,'"]')))&&t.classList.add("active")):(t=e.target.getAttribute("id"),console.log("Hidden section:",t),(e=document.querySelector('nav a[href="#'.concat(t,'"]')))&&e.classList.remove("active"))})},{threshold:.5});sections.forEach(function(e){observer.observe(e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJzZWN0aW9ucyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImVudHJ5IiwibmF2TGluayIsInZpc2libGVTZWN0aW9uSWQiLCJ0YXJnZXQiLCJnZXRBdHRyaWJ1dGUiLCJjb25zb2xlIiwibG9nIiwicXVlcnlTZWxlY3RvciIsImNvbmNhdCIsImNsYXNzTGlzdCIsImhpZGRlblNlY3Rpb25JZCIsInJlbW92ZSIsInRocmVzaG9sZCIsInNlY3Rpb24iLCJvYnNlcnZlIl0sIm1hcHBpbmdzIjoiQUFBQSxhQUVBLElBQU1BLFNBQVdDLFNBQVNDLGlCQUFpQixVQUFXLEVBSWhEQyxTQUFXLElBQUlDLHFCQUNwQixTQUVDQyxFQUFRQyxHQUFSRCxFQUVFQyxRQUFBLFNBQUFDLEdBREQsSUFtQk9DLEVBakJORCxFQUFNRSxnQkFBQUEsRUFBbUJGLEVBQU1HLE9BQU9DLGFBQWEsSUFBSSxFQUN2REMsUUFFQUMsSUFBQSxtQkFBQUosQ0FBQSxHQUtDRCxFQUFBUCxTQUFBYSxjQUFBLGdCQUFBQyxPQUNRQyxFQUFjLElBQUEsQ0FIdkIsSUFHQ1IsRUFJS1MsVUFBQUEsSUFBZSxRQUFTUCxJQUl4QkYsRUFBVVAsRUFBU2EsT0FBQUEsYUFBYSxJQUFBLEVBSHRDRixRQU1JSixJQUFBQSxrQkFBU1MsQ0FBQSxHQUdiVCxFQUFBUCxTQUFBYSxjQUFBLGdCQUFBQyxPQUNERSxFQUFBLElBQUEsQ0FDQyxJQUdIVCxFQUFBUSxVQUFBRSxPQUFBLFFBQUEsRUFHRGxCLENBQUFBLENBTEMsRUFPQSxDQUFDbUIsVUFBQSxFQUFBLENBTEYsRUFTQW5CLFNBQUFNLFFBQUEsU0FBQWMsR0FMQ2pCLFNBQVNrQixRQUFRRCxDQUFPLENBT3pCLENBQUEiLCJmaWxlIjoic2NyaXB0Lm1pbmkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBzZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uJyk7XHJcbi8vIGNvbnN0IG5hdkxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpO1xyXG5cclxuLy8gQ3JhdGUgb2JzZXJ2ZXJcclxuY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXHJcblx0KGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcblxyXG5cdFx0ZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG5cdFx0XHRpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuXHRcdFx0XHQvLyBQb2JpZXJ6IGlkZW50eWZpa2F0b3Igc2VrY2ppIHdpZG9jem5laiB3IHByemVnbMSFZGFyY2VcclxuXHRcdFx0XHRjb25zdCB2aXNpYmxlU2VjdGlvbklkID0gZW50cnkudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnVmlzaWJsZSBzZWN0aW9uOicsIHZpc2libGVTZWN0aW9uSWQpO1xyXG5cclxuXHRcdFx0XHQvLyBabmFqZMW6IG9kcG93aWVkbmkgbGluayBuYXdpZ2FjeWpueSBkbGEgd2lkb2N6bmVqIHNla2NqaVxyXG5cdFx0XHRcdGNvbnN0IG5hdkxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG5cdFx0XHRcdFx0YG5hdiBhW2hyZWY9XCIjJHt2aXNpYmxlU2VjdGlvbklkfVwiXWBcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdGlmIChuYXZMaW5rKSB7XHJcblx0XHRcdFx0XHQvLyBEb2RhaiBrbGFzxJkgYWt0eXduxIUgZGxhIHdpZG9jem5lZ28gbGlua3UgbmF3aWdhY3lqbmVnb1xyXG5cdFx0XHRcdFx0bmF2TGluay5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gUG9iaWVyeiBpZGVudHlmaWthdG9yIHNla2NqaSwga3TDs3JhIG5pZSBqZXN0IGp1xbwgd2lkb2N6bmEgdyBwcnplZ2zEhWRhcmNlXHJcblx0XHRcdFx0Y29uc3QgaGlkZGVuU2VjdGlvbklkID0gZW50cnkudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnSGlkZGVuIHNlY3Rpb246JywgaGlkZGVuU2VjdGlvbklkKTtcclxuXHJcblx0XHRcdFx0Ly8gWm5hamTFuiBvZHBvd2llZG5pIGxpbmsgbmF3aWdhY3lqbnkgZGxhIHVrcnl0ZWogc2VrY2ppXHJcblx0XHRcdFx0Y29uc3QgbmF2TGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcblx0XHRcdFx0XHRgbmF2IGFbaHJlZj1cIiMke2hpZGRlblNlY3Rpb25JZH1cIl1gXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRpZiAobmF2TGluaykge1xyXG5cdFx0XHRcdFx0Ly8gVXN1xYQga2xhc8SZIGFrdHl3bsSFIGRsYSB1a3J5dGVnbyBsaW5rdSBuYXdpZ2FjeWpuZWdvXHJcblx0XHRcdFx0XHRuYXZMaW5rLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHR7IHRocmVzaG9sZDogMC41IH1cclxuKTtcclxuXHJcbi8vIERvZGFqIG9ic2Vyd2F0b3IgcHJ6ZWtyb2p1IGRvIGthxbxkZWogc2VrY2ppXHJcbnNlY3Rpb25zLmZvckVhY2goKHNlY3Rpb24pID0+IHtcclxuXHRvYnNlcnZlci5vYnNlcnZlKHNlY3Rpb24pO1xyXG59KTtcclxuXHJcbi8vIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxyXG4vLyBcdChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xyXG4vLyBcdFx0bGV0IHZpc2libGVTZWN0aW9uSWQgPSBudWxsOyAvLyBJRCB3aWRvY3puZWogc2VrY2ppXHJcblxyXG4vLyBcdFx0ZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4vLyBcdFx0XHRpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuLy8gXHRcdFx0XHQvLyBQb2JpZXJ6IGlkZW50eWZpa2F0b3Igc2VrY2ppIHdpZG9jem5laiB3IHByemVnbMSFZGFyY2VcclxuLy8gXHRcdFx0XHR2aXNpYmxlU2VjdGlvbklkID0gZW50cnkudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuLy8gXHRcdFx0fVxyXG4vLyBcdFx0fSk7XHJcblxyXG4vLyBcdFx0Ly8gVXN1xYQga2xhc8SZIGFrdHl3bsSFIHplIHdzenlzdGtpY2ggbGlua8OzdyBuYXdpZ2FjeWpueWNoXHJcbi8vIFx0XHRjb25zdCBuYXZMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ25hdiBhJyk7XHJcbi8vIFx0XHRuYXZMaW5rcy5mb3JFYWNoKChuYXZMaW5rKSA9PiB7XHJcbi8vIFx0XHRcdG5hdkxpbmsuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbi8vIFx0XHR9KTtcclxuXHJcbi8vIFx0XHQvLyBEb2RhaiBrbGFzxJkgYWt0eXduxIUgZGxhIHdpZG9jem5lZ28gbGlua3UgbmF3aWdhY3lqbmVnb1xyXG4vLyBcdFx0aWYgKHZpc2libGVTZWN0aW9uSWQpIHtcclxuLy8gXHRcdFx0Y29uc3QgYWN0aXZlTmF2TGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbi8vIFx0XHRcdFx0YG5hdiBhW2hyZWY9XCIjJHt2aXNpYmxlU2VjdGlvbklkfVwiXWBcclxuLy8gXHRcdFx0KTtcclxuLy8gXHRcdFx0aWYgKGFjdGl2ZU5hdkxpbmspIHtcclxuLy8gXHRcdFx0XHRhY3RpdmVOYXZMaW5rLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4vLyBcdFx0XHR9XHJcbi8vIFx0XHR9XHJcbi8vIFx0fSxcclxuLy8gXHR7IHRocmVzaG9sZDogMC41fVxyXG4vLyApO1xyXG5cclxuLy8gLy8gRG9kYWogb2JzZXJ3YXRvciBwcnpla3JvanUgZG8ga2HFvGRlaiBzZWtjamlcclxuLy8gc2VjdGlvbnMuZm9yRWFjaCgoc2VjdGlvbikgPT4ge1xyXG4vLyBcdG9ic2VydmVyLm9ic2VydmUoc2VjdGlvbik7XHJcbi8vIH0pO1xyXG5cclxuLy8gVXR3w7NyeiBvYnNlcndhdG9yIHByemVrcm9qdVxyXG5cclxuLy8gVXR3w7NyeiBvYnNlcndhdG9yIHByemVrcm9qdVxyXG4vLyBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuLy8gICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbi8vICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4vLyAgICAgICAgIGNvbnN0IHZpc2libGVTZWN0aW9uSWQgPSBlbnRyeS50YXJnZXQuZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG4gIFxyXG4vLyAgICAgICAgIC8vIFBvYmllcnogd3lzb2tvxZvEhyBuYXdpZ2FjamlcclxuLy8gICAgICAgICBjb25zdCBuYXZIZWlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCduYXYnKS5vZmZzZXRIZWlnaHQ7XHJcbiAgXHJcbi8vICAgICAgICAgLy8gT2JsaWN6IHd5c29rb8WbxIcgd2lkb2N6bmVnbyBvYnN6YXJ1IHNla2NqaVxyXG4vLyAgICAgICAgIGNvbnN0IHZpc2libGVTZWN0aW9uSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gbmF2SGVpZ2h0O1xyXG4gIFxyXG4vLyAgICAgICAgIC8vIFNwcmF3ZMW6LCBjenkgd2nEmWtzem/Fm8SHIHNla2NqaSBqZXN0IHdpZG9jem5hXHJcbi8vICAgICAgICAgaWYgKGVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQgPiB2aXNpYmxlU2VjdGlvbkhlaWdodCAqIDAuNSkge1xyXG4vLyAgICAgICAgICAgLy8gRG9kYWoga2xhc8SZIGFrdHl3bsSFIGRsYSB3aWRvY3puZWdvIGxpbmt1IG5hd2lnYWN5am5lZ29cclxuLy8gICAgICAgICAgIGNvbnN0IGFjdGl2ZU5hdkxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBuYXYgYVtocmVmPVwiIyR7dmlzaWJsZVNlY3Rpb25JZH1cIl1gKTtcclxuLy8gICAgICAgICAgIGlmIChhY3RpdmVOYXZMaW5rICYmICFhY3RpdmVOYXZMaW5rLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcclxuLy8gICAgICAgICAgICAgYWN0aXZlTmF2TGluay5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuLy8gICAgICAgICAgIH1cclxuICBcclxuLy8gICAgICAgICAgIC8vIFVzdcWEIGtsYXPEmSBha3R5d27EhSB6IHBvem9zdGHFgnljaCBsaW5rw7N3IG5hd2lnYWN5am55Y2hcclxuLy8gICAgICAgICAgIGNvbnN0IGluYWN0aXZlTmF2TGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCduYXYgYTpub3QoW2hyZWY9XCIjJyArIHZpc2libGVTZWN0aW9uSWQgKyAnXCJdKScpO1xyXG4vLyAgICAgICAgICAgaW5hY3RpdmVOYXZMaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xyXG4vLyAgICAgICAgICAgICBpZiAobGluay5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XHJcbi8vICAgICAgICAgICAgICAgbGluay5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICB9XHJcbi8vICAgICB9KTtcclxuLy8gICB9LCB7IHRocmVzaG9sZDogMCB9KTtcclxuICBcclxuLy8gICAvLyBEb2RhaiBvYnNlcndhdG9yIHByemVrcm9qdSBkbyBrYcW8ZGVqIHNla2NqaVxyXG4vLyAgIHNlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7XHJcbi8vICAgICBvYnNlcnZlci5vYnNlcnZlKHNlY3Rpb24pO1xyXG4vLyAgIH0pO1xyXG4iXX0=
